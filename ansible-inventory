#!/bin/bash

# Initialize variables
DEBUG_MODE="off"
INVENTORY_FILE=""

# Colors
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
CYAN="\e[36m"
NC="\e[0m" # No Color

# Help text
function help {
   echo ""
   echo "Help Ansible inventory query tool."
   echo "   Usage:"
   echo "      $ ansible-inventory --inventory=[PATH]<FILE>     The PATH to the inventory, which defaults to /etc/ansible/hosts."
   echo "      $ ansible-inventory --debug                      Runs debug mode."
   echo "      $ ansible-inventory --help                       This help text."
   echo ""
   exit 1
}

# Parse input parameters
for PARAMETER in "$@" ; do
        if [[ $PARAMETER == "--help" ]] || [[ $PARAMETER == "-help" ]] || [[ $PARAMETER == "-h" ]]; then
                help
        elif [[ $PARAMETER == "--debug" ]] ; then
                echo "Debug mode on!"
                DEBUG_MODE="ON"
        elif [[ $PARAMETER =~ ^--inventory=[a-zA-Z_\-/]{1,} ]]; then
                INVENTORY_FILE="${PARAMETER#--inventory=}"
                echo "Use inventory file '$INVENTORY_FILE'."
        else
                echo "Error: Unknown input parameter specified: '$PARAMETER'"
                help
        fi
done

# Validate ANSIBLE_CONFIG
if [[ $ANSIBLE_CONFIG == "" ]] ; then
        ANSIBLE_CONFIG='/etc/ansible/ansible.cfg'
fi

# Get inventory file from ansible.cfg
function get_inventory() {
        GREP_RESULT="$(cat $1 | grep ^inventory[[:space:]]*=)"
        echo "2: ANSIBLE_CONFIG=$1, INVENTORY_FILE=$INVENTORY_FILE, GREP_RESULT=$GREP_RESULT"
        if [[ "${GREP_RESULT}" =~ ^inventory ]] ; then
                GREP_RESULT=$(echo $GREP_RESULT | sed 's/ //g')
                INVENTORY_FILE=${GREP_RESULT#inventory=}
                INVENTORY_FILE=$(echo "$INVENTORY_FILE")
                echo "3: ANSIBLE_CONFIG=$1, INVENTORY_FILE=$INVENTORY_FILE, GREP_RESULT=$GREP_RESULT"
                if [ -f $INVENTORY_FILE ] ; then
                        ANSIBLE_CONFIG=$1
                else
                        echo "Error: The inventory file '$INVENTORY_FILE' defined in '$1' doesn't exists!"
                        exit 1
                fi
                return 0
        else
                return 1
        fi
}

# Validate inventory file.
if [[ $INVENTORY_FILE == "" ]] ; then
        echo "1: ANSIBLE_CONFIG=$ANSIBLE_CONFIG, INVENTORY_FILE=$INVENTORY_FILE"
        #echo $(get_inventory "$ANSIBLE_CONFIG")
        #echo $(get_inventory "ansible.cfg")
        if get_inventory "$ANSIBLE_CONFIG" || get_inventory "ansible.cfg" ; then
                echo "Uses inventory file '$INVENTORY_FILE' defined in '$ANSIBLE_CONFIG'."
        elif [ -f "hosts" ] ; then
                INVENTORY_FILE='hosts'
                echo "Uses inventory file '$INVENTORY_FILE' in current directory."
        else
                echo "Error: No inventory file specified!"
                echo "Supply an inventory file in your Ansible config file '$ANSIBLE_CONFIG' or specify one as a parameter '--inventory=[PATH]<FILE>'."
                exit 1
        fi
fi

# Check if inventory exists.
if ! [ -f $INVENTORY_FILE ] ; then
        echo "Error: Unable to open inventory file '$INVENTORY_FILE='!"
        exit 1
fi

# Debug mode
function debug () {
        if [[ $DEBUG_MODE == "ON" ]] ; then
                echo -e "$1" 
        fi
}

# Initialize counter variables
LINE_NUM=0
SECTIONS_NUM=0

# Initialize sections variables
SECTION=""
SECTION_TYPE=""

# Proces inventory file
while read -r line || [ -n "$line" ] ; do
        ((LINE_NUM++))

        # Skip blank lines and comments
        if [ -z "$line" -o "${line:0:1}" = ";" -o "${line:0:1}" = "#" ] ; then
                debug "${LINE_NUM}> ${BLUE}skipped:${NC} $line"
                continue
        fi

        # Found a 'hosts' SECTION marker?
        if [[ "${line}" =~ ^\[[a-zA-Z0-9_\-]{1,}\][[:space:]]*#?.*$ ]] ; then
                # Set SECTION & TYPE var to name of section (strip [ and ] from section marker)
                SECTION_TYPE="hosts"
                SECTION=${line//[[:space:]]/}
                SECTION=$(echo $SECTION | sed 's/#.*$//g')
                SECTION="${SECTION#[}"
                SECTION="${SECTION%]}"
                ((SECTIONS_NUM++))
                debug "${LINE_NUM}:${SECTIONS_NUM}> ${YELLOW}[${SECTION}]${NC}(${SECTION_TYPE}) ${GREEN}host section parsed!${NC} $line"
                continue
        fi

        # Found an 'children' SECTION marker?
        if [[ "${line}" =~ ^\[[a-zA-Z0-9_:\-]{1,}:children\]$ ]] ; then
                # Set SECTION var to name of section (strip [ and ] from section marker)
                SECTION_TYPE="children"
                SECTION="${line#[}"
                SECTION="${SECTION%:children]}"
                ((SECTIONS_NUM++))
                debug "${LINE_NUM}:${SECTIONS_NUM}> ${YELLOW}[${SECTION}:${SECTION_TYPE}]${NC} ${GREEN}childeren section parsed!${NC} $line"
                continue
        fi
        # Found an 'vars' SECTION marker?
        if [[ "${line}" =~ ^\[[a-zA-Z0-9_\-]{1,}:vars\]$ ]] ; then
                # Set SECTION var to name of section (strip [ and ] from section marker)
                SECTION_TYPE="vars"
                SECTION="${line#[}"
                SECTION="${SECTION%:vars]}"
                ((SECTIONS_NUM++))
                debug "${LINE_NUM}:${SECTIONS_NUM}> ${YELLOW}[${SECTION}:${SECTION_TYPE}]${NC} ${GREEN}vars section parsed!${NC} $line"
                continue
        fi

        # Check for valid variable 
        if [[ "${line}" =~ ^([a-zA-Z0-9._]{1,})[:space:]*=(.*) ]] ; then
                VARIABLE=${BASH_REMATCH[1]}
                VALUE=${BASH_REMATCH[2]}
                debug "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${PURPLE}${VARIABLE}${NC}=${CYAN}${VALUE}${NC} ${GREEN}Variable parsed!${NC} $line"       
                continue
        fi

        # Check for valid FQDN
        if [[ "${line}" =~ ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[[:space:]]{0,}$ ]] ; then
                # Valid HOST_NAME
                HOST_NAME=$(echo $line | sed 's/ //g')
                debug "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME}${NC} ${GREEN}FQDN parsed!${NC} $line"
                continue
        fi

        # Check for valid FQDN with additional variable
        if [[ "${line}" =~ ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[:space:]*[^=]*=.*$ ]] ; then
                # Valid HOST_NAME
                if [[ "${line}" =~ ^([a-zA-Z0-9\-]{0,61})([a-zA-Z0-9\.\-]*)[:space:]*([^=]*)=(.*)$ ]] ; then
                        HOST_NAME=${BASH_REMATCH[1]}
                        DOMAIN=${BASH_REMATCH[2]}
                        VARIABLE=${BASH_REMATCH[3]}
                        VALUE=${BASH_REMATCH[4]}
                fi
                debug "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME} ${PURPLE}${VARIABLE}${NC}=${CYAN}${VALUE}${NC} ${GREEN}FQDN with variable parsed!${NC} $line"
                continue
        fi

        # Check for valid FQDN with ansible [1:4] notation
        if [[ "${line}" =~ ^([a-zA-Z0-9][a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[:space:]*$ ]] ; then
                # Valid HOST_NAME
                if [[ "${line}" =~ ^([a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61})?([a-zA-Z0-9\.\-]*)?[space]*$ ]] ; then
                        FIRSTPART=${BASH_REMATCH[1]}
                        START=${BASH_REMATCH[2]}
                        END=${BASH_REMATCH[3]}
                        LASTPART=${BASH_REMATCH[4]}
                        DOMAIN=${BASH_REMATCH[5]}
                        for ((NUM=${START}; NUM<=${END}; NUM++))
                                do
                                HOST_NAME="${FIRSTPART}${NUM}${LASTPART}$DOMAIN"
                                debug "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME}${NC} ${GREEN}FQDN with [n:n] parsed!${NC} $line"
                        done
                        continue
                fi
        fi
 
        # Check for valid FQDN with ansible [1:4] notation with additional variable
        if [[ "${line}" =~ ^([a-zA-Z0-9][a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[:space:]*[^=]*=.*$ ]] ; then
                # Valid HOST_NAME
                if [[ "${line}" =~ ^([a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61})?([a-zA-Z0-9\.\-]*)?[space]*([^=]*)=(.*)$ ]] ; then
                        FIRSTPART=${BASH_REMATCH[1]}
                        START=${BASH_REMATCH[2]}
                        END=${BASH_REMATCH[3]}
                        LASTPART=${BASH_REMATCH[4]}
                        DOMAIN=${BASH_REMATCH[5]}
                        VARIABLE=${BASH_REMATCH[6]}
                        VALUE=${BASH_REMATCH[7]}
                        for ((NUM=${START}; NUM<=${END}; NUM++))
                                do
                                HOST_NAME="${FIRSTPART}${NUM}${LASTPART}$DOMAIN"
                                debug "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME} ${PURPLE}${VARIABLE}${NC}=${CYAN}${VALUE}${NC} ${GREEN}FQDN with [n:n] and variable parsed!${NC} $line"
                        done
                        continue
                fi
        fi

        # No Match!
        debug "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${RED}Not parsed!${NC}: $line"

done  <"${INVENTORY_FILE}"

echo "END"
