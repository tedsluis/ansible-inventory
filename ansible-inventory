#!/bin/bash

# Initialize variables
DEBUG_MODE="OFF"
INVENTORY_FILE=""
INTERACTIVE="ON"
COMMAND=""
ACTION=""

# Colors
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
CYAN="\e[36m"
NC="\e[0m" # No Color

# Display message with or without ansi colors.
function COLOR () {
        if [[ $INTERACTIVE == "ON" ]]; then
                # Display message with ansi colors.
                echo -e "$1"
        else
                # Remove Ansi colors when every running non interactive.
                echo "$1" | sed -r "s/\\\\e\[[0-9]+m//g" 
        fi
}

# LOG routine
function LOG () {
        TYPE=$1
        MESSAGE=$2
        case $TYPE in
                "DEBUG")
                        if [[ $DEBUG_MODE == "ON" ]] ; then
                                COLOR "$MESSAGE" 
                        fi
                        ;;
                "MSG")
                        if [[ $INTERACTIVE == "ON" ]]; then
                                COLOR "$MESSAGE"
                        fi
                        ;;
                "ERROR")
                        if [[ $INTERACTIVE == "ON" ]]; then
                                COLOR "$MESSAGE"
                        else
                                # Remove ansi color and write only to stderr
				>&2 echo $(echo "$MESSAGE" | sed -r "s/\\\\e\[[0-9]+m//g")
                        fi
                        ;;
                "DATA")
                        echo "$MESSAGE"
                        ;;
        esac
}

# Check if script runs interactive
if [ -t 1 ] ; then
        INTERACTIVE="ON"
        LOG "DEBUG" "Interactive session!"
else
        INTERACTIVE="OFF"
fi

# Help text
function help {
   LOG "MSG" ""
   LOG "MSG" "Ansible inventory query tool."
   LOG "MSG" ""
   LOG "MSG" "Usage:"
   LOG "MSG" "  ${YELLOW}ansible-inventory [OPTIONS] [ARGUMENTS] COMMAND${NC}"
   LOG "MSG" "  ${YELLOW}ansible-inventory [ -h | --help | -v | --version ]${NC}"
   LOG "MSG" ""
   LOG "MSG" "OPTIONS:"
   LOG "MSG" "  ${YELLOW}-d | --debug${NC}                              Runs debug mode."
   LOG "MSG" "  ${YELLOW}-v | --version${NC}                            Get version."
   LOG "MSG" "  ${YELLOW}-h | --help${NC}                               This help text."
   LOG "MSG" "  ${YELLOW}--inventory=[PATH]<FILE>${NC}                  The PATH to the inventory,"
   LOG "MSG" "                                            which defaults to /etc/ansible/hosts."
   LOG "MSG" "ARGUMENTS:"
   LOG "MSG" "  ${YELLOW}--group=<section>${NC}                         Set group filter."
   LOG "MSG" "  ${YELLOW}--host=<host>${NC}                             Set host filter."
   LOG "MSG" "  ${YELLOW}--fqdn=<fqdn>${NC}                             Set fqdn filter."
   LOG "MSG" "  ${YELLOW}--variable=<variable>${NC}                     Set variable filter."
   LOG "MSG" "  ${YELLOW}--value=<value>${NC}                           Set value filter."
   LOG "MSG"
   LOG "MSG" "COMMANDS:"
   LOG "MSG" "  ${YELLOW}list [groups|hosts|fqdns|variable|values]${NC} List group(s)".
   LOG "MSG" "  ${YELLOW}show [groups|hosts|fqdns|variable|values]${NC} Show group(s)".
   LOG "MSG" "  ${YELLOW}ssh <host>${NC}                                Show group(s)".
   LOG "MSG" ""
   exit 0
}

# Version text
function version {
   LOG "MSG" ""
   LOG "MSG" "ansible-inventory February 2017."
   LOG "MSG" ""
   exit 0
}

# Parse input parameters
for PARAMETER in "$@" ; do
        if [[ $PARAMETER == "--help" ]] || [[ $PARAMETER == "-help" ]] || [[ $PARAMETER == "-h" ]]; then
                help
        elif [[ $PARAMETER == "--version" ]] || [[ $PARAMETER == "-version" ]] || [[ $PARAMETER == "-v" ]]; then
                version 
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER == "--debug" ]] ; then
                LOG "MSG" "Debug mode on!"
                DEBUG_MODE="ON"
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^--inventory=[a-zA-Z_\-/]{1,} ]]; then
                INVENTORY_FILE="${PARAMETER#--inventory=}"
                LOG "MSG" "Use inventory file '$INVENTORY_FILE'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^--groups?=[a-zA-Z0-9_\-]+$ ]]; then
		GROUP_FILTER=$(echo $PARAMETER | sed 's/^--groups?=//g')
                LOG "MSG" "Use group filter '$GROUP_FILTER'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^--hosts?=[a-zA-Z0-9_\-]+$ ]]; then
                HOST_FILTER=$(echo $PARAMETER | sed 's/^--hosts?=//g')
                LOG "MSG" "Use host filter '$HOST_FILTER'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^--fqdns?=[a-zA-Z0-9_\.\-]+$ ]]; then
                FQDN_FILTER=$(echo $PARAMETER | sed 's/^--fqdns?=//g')
                LOG "MSG" "Use fqdn filter '$FQDN_FILTER'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^--variables?[a-zA-Z0-9_\-]+$ ]]; then
                VARIABLE_FILTER=$(echo $PARAMETER | sed 's/^--variables?=//g')
                LOG "MSG" "Use variable filter '$VARIABLE_FILTER'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^--values?=[^[:space:]]+$ ]]; then
                VALUE_FILTER=$(echo $PARAMETER | sed 's/^--values?=//g')
                LOG "MSG" "Use value filter '$VALUE_FILTER'."
	elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^list$ ]]; then
                COMMAND="LIST"
                LOG "MSG" "COMMAND = '$COMMAND'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^show$ ]]; then
                COMMAND="SHOW"
                LOG "MSG" "COMMAND = '$COMMAND'."
        elif [[ $COMMAND == "" ]] && [[ $PARAMETER =~ ^ssh$ ]]; then
                COMMAND="SSH"
                LOG "MSG" "COMMAND = '$COMMAND'."
	elif [[ $ACTION == "" ]] && [[ $COMMAND =~ ^(LIST|SHOW)$ ]] && [[ $PARAMETER =~ ^groups?$ ]]; then
                ACTION="GROUP"
                LOG "MSG" "ACTION = '$ACTION'."
	elif [[ $ACTION == "" ]] && [[ $COMMAND =~ ^(LIST|SHOW)$ ]] && [[ $PARAMETER =~ ^hosts?$ ]]; then
                ACTION="HOST"
                LOG "MSG" "ACTION = '$ACTION'."
	elif [[ $ACTION == "" ]] && [[ $COMMAND =~ ^(LIST|SHOW)$ ]] && [[ $PARAMETER =~ ^fqdns?$ ]]; then
                ACTION="FQDN"
                LOG "MSG" "ACTION = '$ACTION'."
	elif [[ $ACTION == "" ]] && [[ $COMMAND =~ ^(LIST|SHOW)$ ]] && [[ $PARAMETER =~ ^variables?$ ]]; then
                ACTION="VARIABLE"
                LOG "MSG" "ACTION = '$ACTION'."
	elif [[ $ACTION == "" ]] && [[ $COMMAND =~ ^(LIST|SHOW)$ ]] && [[ $PARAMETER =~ ^values?$ ]]; then
                ACTION="VALUE"
                LOG "MSG" "ACTION = '$ACTION'."
        else
                LOG "ERROR" "${RED}Error: Unknown input parameter specified: '$PARAMETER'${NC}"
                help
        fi
done

# Validate ANSIBLE_CONFIG
if [[ $ANSIBLE_CONFIG == "" ]] ; then
        ANSIBLE_CONFIG='/etc/ansible/ansible.cfg'
fi

# Get inventory file from ansible.cfg
function get_inventory() {
        GREP_RESULT="$(cat $1 | grep ^inventory[[:space:]]*=)"
        LOG "DEBUG" "2: ANSIBLE_CONFIG=$1, INVENTORY_FILE=$INVENTORY_FILE, GREP_RESULT=$GREP_RESULT"
        if [[ "${GREP_RESULT}" =~ ^inventory ]] ; then
                GREP_RESULT=$(echo $GREP_RESULT | sed 's/ //g')
                INVENTORY_FILE=${GREP_RESULT#inventory=}
                INVENTORY_FILE=$(echo "$INVENTORY_FILE")
                LOG "DEBUG" "3: ANSIBLE_CONFIG=$1, INVENTORY_FILE=$INVENTORY_FILE, GREP_RESULT=$GREP_RESULT"
                if [ -f $INVENTORY_FILE ] ; then
                        ANSIBLE_CONFIG=$1
                else
                        LOG "ERROR" "${RED}Error: The inventory file '$INVENTORY_FILE' defined in '$1' doesn't exists!${NC}"
                        exit 1
                fi
                return 0
        else
                return 1
        fi
}

# Validate inventory file.
if [[ $INVENTORY_FILE == "" ]] ; then
        LOG "DEBUG" "1: ANSIBLE_CONFIG=$ANSIBLE_CONFIG, INVENTORY_FILE=$INVENTORY_FILE"
        LOG "DEBUG" $(get_inventory "$ANSIBLE_CONFIG")
        LOG "DEBUG" $(get_inventory "ansible.cfg")
        if get_inventory "$ANSIBLE_CONFIG" || get_inventory "ansible.cfg" ; then
                LOG "MSG" "Uses inventory file '$INVENTORY_FILE' defined in '$ANSIBLE_CONFIG'."
        elif [ -f "hosts" ] ; then
                INVENTORY_FILE='hosts'
                LOG "MSG" "Uses inventory file '$INVENTORY_FILE' in current directory."
        else
                LOG "ERROR" "${RED}Error: No inventory file specified!${NC}"
                LOG "MSG" "${YELLOW}Supply an inventory file in your Ansible config file '$ANSIBLE_CONFIG' or specify one as a parameter '--inventory=[PATH]<FILE>'.${NC}"
                exit 1
        fi
fi

# Check if inventory exists.
if ! [ -f $INVENTORY_FILE ] ; then
        LOG "ERROR" "${RED}Error: Unable to open inventory file '$INVENTORY_FILE='!${NC}"
        exit 1
fi

# Initialize counter variables
LINE_NUM=0
SECTIONS_NUM=0

# Initialize sections variables
SECTION=""
SECTION_TYPE=""

# Proces inventory file
while read -r line || [ -n "$line" ] ; do
        ((LINE_NUM++))

        # Skip blank lines and comments
        if [ -z "$line" -o "${line:0:1}" = ";" -o "${line:0:1}" = "#" ] ; then
                LOG "DEBUG" "${LINE_NUM}> ${BLUE}skipped:${NC} $line"
                continue
        fi

        # Found a 'hosts' SECTION marker?
        if [[ "${line}" =~ ^\[[a-zA-Z0-9_\-]{1,}\][[:space:]]*#?.*$ ]] ; then
                # Set SECTION & TYPE var to name of section (strip [ and ] from section marker)
                SECTION_TYPE="hosts"
                SECTION=${line//[[:space:]]/}
                SECTION=$(echo $SECTION | sed 's/#.*$//g')
                SECTION="${SECTION#[}"
                SECTION="${SECTION%]}"
                ((SECTIONS_NUM++))
                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> ${YELLOW}[${SECTION}]${NC}(${SECTION_TYPE}) ${GREEN}host section parsed!${NC} $line"
		LOG "DATA" "$SECTION ($SECTION_TYPE)"
                continue
        fi

        # Found an 'children' SECTION marker?
        if [[ "${line}" =~ ^\[[a-zA-Z0-9_:\-]{1,}:children\]$ ]] ; then
                # Set SECTION var to name of section (strip [ and ] from section marker)
                SECTION_TYPE="children"
                SECTION="${line#[}"
                SECTION="${SECTION%:children]}"
                ((SECTIONS_NUM++))
                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> ${YELLOW}[${SECTION}:${SECTION_TYPE}]${NC} ${GREEN}childeren section parsed!${NC} $line"
		LOG "DATA" "$SECTION ($SECTION_TYPE)"
                continue
        fi
        # Found an 'vars' SECTION marker?
        if [[ "${line}" =~ ^\[[a-zA-Z0-9_\-]{1,}:vars\]$ ]] ; then
                # Set SECTION var to name of section (strip [ and ] from section marker)
                SECTION_TYPE="vars"
                SECTION="${line#[}"
                SECTION="${SECTION%:vars]}"
                ((SECTIONS_NUM++))
                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> ${YELLOW}[${SECTION}:${SECTION_TYPE}]${NC} ${GREEN}vars section parsed!${NC} $line"
		LOG "DATA" "$SECTION ($SECTION_TYPE)"
                continue
        fi

        # Check for valid variable 
        if [[ "${line}" =~ ^([a-zA-Z0-9._]{1,})[:space:]*=(.*) ]] ; then
                VARIABLE=${BASH_REMATCH[1]}
                VALUE=${BASH_REMATCH[2]}
                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${PURPLE}${VARIABLE}${NC}=${CYAN}${VALUE}${NC} ${GREEN}Variable parsed!${NC} $line"
                LOG "DATA" "$VARIABLE=$VALUE ($SECTION,$SECTION_TYPE)"	
                continue
        fi

        # Check for valid FQDN
        if [[ "${line}" =~ ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[[:space:]]{0,}$ ]] ; then
                # Valid HOST_NAME
                HOST_NAME=$(echo $line | sed 's/ //g')
                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME}${NC} ${GREEN}FQDN parsed!${NC} $line"
                LOG "DATA" "$HOST_NAME ($SECTION,$SECTION_TYPE)"	
                continue
        fi

        # Check for valid FQDN with additional variable
        if [[ "${line}" =~ ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[:space:]*[^=]*=.*$ ]] ; then
                # Valid HOST_NAME
                if [[ "${line}" =~ ^([a-zA-Z0-9\-]{0,61})([a-zA-Z0-9\.\-]*)[:space:]*([^=]*)=(.*)$ ]] ; then
                        HOST_NAME=${BASH_REMATCH[1]}
                        DOMAIN=${BASH_REMATCH[2]}
                        VARIABLE=${BASH_REMATCH[3]}
                        VALUE=${BASH_REMATCH[4]}
                fi
                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME} ${PURPLE}${VARIABLE}${NC}=${CYAN}${VALUE}${NC} ${GREEN}FQDN with variable parsed!${NC} $line"
                LOG "DATA" "$HOST_NAME $VARIABLE=$VALUE ($SECTION,$SECTION_TYPE)"
                continue
        fi

        # Check for valid FQDN with ansible [1:4] notation
        if [[ "${line}" =~ ^([a-zA-Z0-9][a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[:space:]*$ ]] ; then
                # Valid HOST_NAME
                if [[ "${line}" =~ ^([a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61})?([a-zA-Z0-9\.\-]*)?[space]*$ ]] ; then
                        FIRSTPART=${BASH_REMATCH[1]}
                        START=${BASH_REMATCH[2]}
                        END=${BASH_REMATCH[3]}
                        LASTPART=${BASH_REMATCH[4]}
                        DOMAIN=${BASH_REMATCH[5]}
                        for ((NUM=${START}; NUM<=${END}; NUM++))
                                do
                                HOST_NAME="${FIRSTPART}${NUM}${LASTPART}$DOMAIN"
                                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME}${NC} ${GREEN}FQDN with [n:n] parsed!${NC} $line"
                                LOG "DATA" "$HOST_NAME ($SECTION,$SECTION_TYPE)"
                        done
                        continue
                fi
        fi
 
        # Check for valid FQDN with ansible [1:4] notation with additional variable
        if [[ "${line}" =~ ^([a-zA-Z0-9][a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*[:space:]*[^=]*=.*$ ]] ; then
                # Valid HOST_NAME
                if [[ "${line}" =~ ^([a-zA-Z0-9\-]{0,61})\[([0-9]{1,3}):([0-9]{1,3})\]([a-zA-Z0-9\-]{0,61})?([a-zA-Z0-9\.\-]*)?[space]*([^=]*)=(.*)$ ]] ; then
                        FIRSTPART=${BASH_REMATCH[1]}
                        START=${BASH_REMATCH[2]}
                        END=${BASH_REMATCH[3]}
                        LASTPART=${BASH_REMATCH[4]}
                        DOMAIN=${BASH_REMATCH[5]}
                        VARIABLE=${BASH_REMATCH[6]}
                        VALUE=${BASH_REMATCH[7]}
                        for ((NUM=${START}; NUM<=${END}; NUM++))
                                do
                                HOST_NAME="${FIRSTPART}${NUM}${LASTPART}$DOMAIN"
                                LOG "DEBUG" "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${YELLOW}${HOST_NAME} ${PURPLE}${VARIABLE}${NC}=${CYAN}${VALUE}${NC} ${GREEN}FQDN with [n:n] and variable parsed!${NC} $line"
                                LOG "DATA" "$HOST_NAME $VARIABLE=$VALUE ($SECTION,$SECTION_TYPE)"
                        done
                        continue
                fi
        fi

        # No Match!
        LOG "ERROR" "${LINE_NUM}:${SECTIONS_NUM}> [${SECTION}:${SECTION_TYPE}] ${RED}Not parsed!${NC}: $line"

done  <"${INVENTORY_FILE}"

LOG "DEBUG" "Finished ${LINE_NUM} lines and ${SECTIONS_NUM}!"
